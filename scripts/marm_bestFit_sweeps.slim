// Keywords: nonWF, non-Wright-Fisher

initialize() {
//	defineConstant("d_Nanc", 100000);
//	defineConstant("d_Nbot", 2);
//	defineConstant("d_Ncurr", 100000);
//	defineConstant("d_Tbot", 10);
	//start the clock
	defineGlobal("start", clock());
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(keepPedigrees=T);	
	defineConstant("Nanc", 61198); //Ancestral population size (to which everything is scaled)
	defineConstant("Nbot", asInteger(Nanc * 0.293)); //Population size at bottleneck
	defineConstant("Ncurr", 33830);	//Population size at time of sampling
	defineConstant("Tbot", asInteger(0.0287*Nanc)); //Time of bottleneck
	defineConstant("Tb", asInteger(d_Tb*Nanc)); //Time of sweep intro
	defineConstant("burnin", asInteger(12*Nanc)); //10N burnin
	defineConstant("simEnd", asInteger(burnin + Tbot)); //SimEnd is burnin + no. of gens since bottleneck
	defineConstant("sweep_intro", asInteger(simEnd-Tb)); //10N burnin
	defineConstant("r", ((Ncurr/Nbot)^(1/Tbot))-1); //Growth rate calculated from Ncurr, Nbot and Tbot
	
	
	defineConstant("exonLength", 130);
	defineConstant("exonsPerGene", 9); 
	defineConstant("intronsPerGene", 8); 
	defineConstant("intronLength", 1591);
	defineConstant("geneLength", (exonLength * exonsPerGene) + (intronLength * intronsPerGene));
	defineConstant("intergenicLength", 16489); 
	defineConstant("totalGenes", 3);
	
	
	
	initializeMutationRate(0.81e-8);
	// mutation types:
	//2Nes = [0, -1, -10, -100, -10000], s = [0.0, -0.0001, -0.001, -0.01, -1]
	initializeMutationType("m1", 0.5, "f", 0.0); //selectively neutral
	initializeMutationType("m2", 0.5, "s", "return runif(1, -10/(Nanc*2), -1/(Nanc*2));"); //weakly deleterious (1<2Nes<10)
	initializeMutationType("m3", 0.5, "s", "return runif(1, -100/(Nanc*2), -10/(Nanc*2));"); //moderately deleterious (10<2Nes<100)
	initializeMutationType("m4", 0.5, "s", "return runif(1, -1000/(Nanc*2), -100/(Nanc*2));"); //strongly deleterious (100<2Nes<1000)

	// Genomic elements:
	initializeGenomicElementType("g1", m1, 1.0); //intergenic
	initializeGenomicElementType("g2", m1, 1.0); //intron
	initializeGenomicElementType("g3", c(m1, m2, m3, m4), c(0.5, 0.3, 0.2, 0)); //exon
	//initializeGenomicElementType("g3", c(m1, m2, m3, m4), c(d_f0, d_f1, d_f2, d_f3)); //exon
	initializeGenomicElementType("g4", m1, 1.0); //exon synonymous
	initializeMutationType("m0", 1, "f", d_Nes/(Nanc*2));
	
	//Initialise genomic element
	//Chromosome with {totalGenes} no. ofgenes, each comprised of {exonsPerGene} {exonLength}bp exons;
	//{intronsPerGene} {intronLength}bp introns, and separated by a {intergenicLength}bp intergenic region
	//Loop through number of genes
	for (gene in 1:totalGenes)
	{
		//Set gene start
		geneStart = (gene-1) * (geneLength+intergenicLength) + 1;
		//Loop through elements within gene (ie number of exons)
		for (element in 1:exonsPerGene)
		{
			//Set exonStart and end coordinates
			exonStart = geneStart + (exonLength * (element-1)) + (intronLength * (element-1));
			exonEnd = exonStart+(exonLength-1);
			for (i in seq(exonStart, exonEnd-1, 3))
			{
				//initializeGenomicElement(g3, i, i+1);
				//initializeGenomicElement(g4, i+2, i+2);
				initializeGenomicElement(g3, i, i+2);
			}
			//Each gene contains one less intron than exons
			if (element < exonsPerGene)
			{
				//Set intron coordinates
				intronStart = exonStart + exonLength;
				intronEnd = intronStart+(intronLength-1);
				initializeGenomicElement(g2, intronStart, intronEnd);
			}
		}
		//Set intergenic region coordinates
		intergenicStart = exonEnd + 1;
		intergenicEnd = intergenicStart + (intergenicLength-1);
		initializeGenomicElement(g1, intergenicStart, intergenicEnd);
	}
	initializeRecombinationRate(1e-8);
	m1.convertToSubstitution = T;
	m2.convertToSubstitution = T;
	m3.convertToSubstitution = T;
	m4.convertToSubstitution = T;
	m0.convertToSubstitution = T;
}
reproduction() {
	// randomize the order of p1.individuals
	parents = sample(p1.individuals, p1.individualCount);
	
	// draw monogamous pairs and generate litters
	for (i in seq(0, p1.individualCount - 2, by=2))
	{
		parent1 = parents[i];
		parent2 = parents[i + 1];
		litterSize = 2;
		
		for (j in seqLen(litterSize))
			p1.addCrossed(parent1, parent2);
	}
	
	// disable this callback for this cycle
	self.active = 0;
}
1 early() {
	sim.addSubpop("p1", Nanc);
	community.rescheduleScriptBlock(s1, start=sweep_intro, end=sweep_intro);
	community.rescheduleScriptBlock(s2, start=sweep_intro, end=simEnd);
	community.rescheduleScriptBlock(s3, start=simEnd, end=simEnd);


}
early() {
	//Constant pop size during burnin
	if (sim.cycle < burnin){
		p1.fitnessScaling = Nanc / p1.individualCount;
	}
	else
	//Bottleneck followed by exponential growth decline for remainder of simulation
	{
	   t = sim.cycle - burnin;
	   p1_size = round(Nbot * (1+ r)^t);
		p1.fitnessScaling = (p1_size) / p1.individualCount;
	}
}


//late() {
//	inds = p1.individuals;
//	catn(sim.cycle + ": " + size(inds) + " (" + max(inds.age) + ")");
//}

s1 late() {
    print('Burnin complete; state saved and beneficial introduced');
	 print('--------------------------------------------------------------');
	// save the state of the simulation
	sim.outputFull("states/slim_" + d_repID + ".txt");
	
	// introduce the sweep mutation
	target = sample(p1.genomes, 1);
	target.addNewDrawnMutation(m0, 37336);
}


s2 late() {
	if (sim.countOfMutationsOfType(m0) == 0)
	{
		fixed = (sum(sim.substitutions.mutationType == m0) == 1);
		
		if (fixed)
		{
			cat(sim.cycle + ": FIXED\n");
			community.deregisterScriptBlock(self);
		}
		else
		{
			cat(sim.cycle + ": LOST - RESTARTING\n");
			
			// go back to tick 1000
			sim.readFromPopulationFile("states/slim_" + d_repID + ".txt");
			
			// start a newly seeded run
			setSeed(rdunif(1, 0, asInteger(2^62) - 1));
			
			// re-introduce the sweep mutation
			target = sample(p1.genomes, 1);
			target.addNewDrawnMutation(m0, 37336);
		}
	}
}


s3 late() {

	if (sim.countOfMutationsOfType(m0) == 0)
	{
		fixed = (sum(sim.substitutions.mutationType == m0) == 1);
		
		if (fixed)
		{
		    ids = p1.individuals.pedigreeParentIDs;
		   
		    id_strings = NULL;
		    for (ind in p1.individuals) 
		    {
		        ids = ind.pedigreeParentIDs;
		        ind_id = strsplit(substr(paste(ind), 14), ">")[0];
		        id_string = paste(ind_id, ind.pedigreeID, ids, sep='\t');
		        writeFile(d_folder + "/pedigreeIDs_" + d_Tb + "_" + d_Nes + "_rep" + d_repID + ".txt", id_string, append=T);

		        id_strings = c(id_strings, id_string);
		    }
		    ids = p1.individuals.pedigreeParentIDs;

		    p1.individuals.genomes.outputVCF(d_folder + "/" + d_Tb + "_" + d_Nes + "_rep" + d_repID + ".vcf");
			 sim.outputFixedMutations(d_folder + "/" + d_Tb + "_" + d_Nes + "_rep" + d_repID + ".fixed", append=F);
			 inds = p1.individuals;
			 print("Simulation complete, final population size: " + size(inds));
		}
	}	
	else
	{
		cat(sim.cycle + ": LOST - RESTARTING\n");
		
		// go back to tick 1000
		sim.readFromPopulationFile("states/slim_" + d_repID + ".txt");
		
		// start a newly seeded run
		setSeed(rdunif(1, 0, asInteger(2^62) - 1));
		
		// re-introduce the sweep mutation
		target = sample(p1.genomes, 1);
		target.addNewDrawnMutation(m0, 37336);
	}
	
}

