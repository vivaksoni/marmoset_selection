// Keywords: nonWF, non-Wright-Fisher

initialize() {
//	defineConstant("d_Nanc", 100000);
//	defineConstant("d_Nbot", 2);
//	defineConstant("d_Ncurr", 100000);
//	defineConstant("d_Tbot", 10);
	//start the clock
	defineGlobal("start", clock());
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(keepPedigrees=T);	
        defineConstant("Nanc", 61198); //Ancestral population size (to which everything is scaled)
        defineConstant("Nbot", asInteger(Nanc * 0.293)); //Population size at bottleneck
        defineConstant("Ncurr", 33830); //Population size at time of sampling
        defineConstant("Tbot", asInteger(0.0287*Nanc)); //Time of bottleneck
   defineConstant("N", Nanc);
	defineConstant("burnin", asInteger(10*Nanc)); //10N burnin
	defineConstant("divergence_time", asInteger((820000/1.5)+burnin));
	defineConstant("simEnd", asInteger(divergence_time + Tbot)); //SimEnd is burnin + no. of gens since bottleneck	

	defineConstant("r", ((Ncurr/Nbot)^(1/Tbot))-1); //Growth rate calculated from Ncurr, Nbot and Tbot
	
	
	// mutation types:
	//2Nes = [0, -1, -10, -100, -10000], s = [0.0, -0.0001, -0.001, -0.01, -1]
	initializeMutationType("m1", 0.5, "f", 0.0); //selectively neutral
	initializeMutationType("m2", 0.5, "s", "return runif(1, -10/(N*2), -1/(N*2));"); //weakly deleterious (1<2Nes<10)
	initializeMutationType("m3", 0.5, "s", "return runif(1, -100/(N*2), -10/(N*2));"); //moderately deleterious (10<2Nes<100)
	initializeMutationType("m4", 0.5, "s", "return runif(1, -1000/(N*2), -100/(N*2));"); //strongly deleterious (100<2Nes<1000)
	// Genomic elements:
	initializeGenomicElementType("g1", m1, 1.0); //intergenic
	//initializeGenomicElementType("g2", c(m1, m2, m3, m4), c(0.5, 0.3, 0.2, 0)); //exon
	initializeGenomicElementType("g2", c(m1, m2, m3, m4), c(d_f0, d_f1, d_f2, d_f3)); //exon
	
	//Initialise genomic element
	//Chromosome with {totalGenes} no. ofgenes, each comprised of {exonsPerGene} {exonLength}bp exons;
	//{intronsPerGene} {intronLength}bp introns, and separated by a {intergenicLength}bp intergenic region
	//Loop through number of genes
//	for (i in seq(0, 3266-1, 3))
//	{
//		
//		initializeGenomicElement(g1, i+2, i+2);
//	}
	initializeGenomicElement(g1, 0, 10);
	m1.convertToSubstitution = T;
	m2.convertToSubstitution = T;
	m3.convertToSubstitution = T;
	m4.convertToSubstitution = T;
	
	initializeMutationRate(d_mu);
	initializeRecombinationRate(d_r);
}
reproduction() {
	// randomize the order of p1.individuals
	parents = sample(p1.individuals, p1.individualCount);
	
	// draw monogamous pairs and generate litters
	for (i in seq(0, p1.individualCount - 2, by=2))
	{
		parent1 = parents[i];
		parent2 = parents[i + 1];
		litterSize = 2;
		
		for (j in seqLen(litterSize))
			p1.addCrossed(parent1, parent2);
	}
	
	// disable this callback for this cycle
	self.active = 0;
}
1 early() {
	sim.addSubpop("p1", Nanc);
	community.rescheduleScriptBlock(s1, start=simEnd, end=simEnd);

}
early() {
	//Constant pop size during burnin and divergence time
	if (sim.cycle < divergence_time){
		p1.fitnessScaling = Nanc / p1.individualCount;
	}
	else
	//Bottleneck followed by exponential growth decline for remainder of simulation
	{
	   t = sim.cycle - divergence_time;
	   p1_size = round(Nbot * (1+ r)^t);
		p1.fitnessScaling = (p1_size) / p1.individualCount;
	}
}


//late() {
//	inds = p1.individuals;
//	catn(sim.cycle + ": " + size(inds) + " (" + max(inds.age) + ")");
//}


s1 late() {
    ids = p1.individuals.pedigreeParentIDs;
   
    id_strings = NULL;
    for (ind in p1.individuals) {
        ids = ind.pedigreeParentIDs;
        ind_id = strsplit(substr(paste(ind), 14), ">")[0];
        id_string = paste(ind_id, ind.pedigreeID, ids, sep='\t');
        writeFile(d_folder + "/pedigreeIDs_" + d_paramID + "_rep" + d_repID + ".txt", id_string, append=T);
        //catn(id_string);
        id_strings = c(id_strings, id_string);
    }
    ids = p1.individuals.pedigreeParentIDs;
//    catn(size(ids) + " ids");
//    catn(size(unique(ids)) + " unique ids");
//    catn(size(id_strings) + " id strings");
//    catn(size(unique(id_strings)) + " unique id strings");
    p1.individuals.genomes.outputVCF(d_folder + "/" + d_paramID + "_rep" + d_repID + ".vcf");
    sim.outputFixedMutations(d_folder + "/" + d_paramID + "_rep" + d_repID + ".fixed");
    
//   print("Peak Mem Usage: " + usage(peak = T));
//	print("Runtime: " + (clock()-start));
	inds = p1.individuals;
	catn(sim.cycle + ": Simulation complete, final population size: " + size(inds));
}
